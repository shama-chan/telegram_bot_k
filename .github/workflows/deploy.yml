# name: Build & Deploy bot
# on:
#   push:
#     branches: [ "main" ]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - uses: actions/checkout@v4
#       - uses: docker/setup-buildx-action@v3
#       - name: Login to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       - name: Build & push image
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           push: true
#           tags: |
#             ghcr.io/${{ github.repository }}:latest
#             ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Connect to Tailscale
#         uses: tailscale/github-action@v2
#         with:
#           authkey: ${{ secrets.TS_AUTHKEY }}

#       - name: Write SSH key (private) for tests
#         shell: bash
#         run: |
#           umask 077
#           cat > key.pem <<'KEY'
#           ${{ secrets.SSH_KEY }}
#           KEY
#           chmod 600 key.pem

#       # ---------------- SANITY TESTS ----------------
#       - name: Sanity 1 — whoami/hostname/pwd
#         shell: bash
#         run: |
#           ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
#             -i key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
#               echo "== inside VM =="
#               whoami
#               hostname
#               pwd
#               date
#             '

#       - name: Sanity 2 — target dir & compose file
#         shell: bash
#         run: |
#           ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i key.pem \
#             ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
#               cd ~/bot_tg/bot.py   # <<< измени путь если другой
#               ls -la
#               test -f docker-compose.yml
#             '

#       - name: Sanity 3 — docker, disk, tailscale
#         shell: bash
#         run: |
#           ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i key.pem \
#             ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
#               docker --version
#               docker compose version
#               df -h | head -n 5
#               tailscale ip -4 || true
#             '

#       - name: Sanity 4 — .env exists
#         shell: bash
#         run: |
#           ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i key.pem \
#             ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
#               cd ~/bot_tg/bot.py
#               test -s .env && echo ".env OK"
#             '

#       # ---------------- DEPLOY ----------------
#       - name: Deploy via SSH
#         uses: appleboy/ssh-action@v1.2.0
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_KEY }}
#           timeout: 180s
#           script: |
#             set -e
#             cd ~/bot_tg/bot.py   # <<< измени путь если другой

#             # 🔹 Новый шаг логина в GHCR
#             echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u shama-chan --password-stdin

#             docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
#             docker compose pull
#             docker compose up -d
#             docker image prune -f


#       - name: Post-check — status & last logs
#         uses: appleboy/ssh-action@v1.2.0
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_KEY }}
#           timeout: 120s
#           script: |
#             cd ~/bot_tg/bot.py
#             docker compose ps
#             docker compose logs --since 2m --no-color | tail -n 200
