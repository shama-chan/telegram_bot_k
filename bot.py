import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import os
import sqlite3

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
def init_db():
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tickets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user TEXT,
        place TEXT,
        desc TEXT,
        photo_id TEXT,
        status TEXT,
        user_id INTEGER,
        username TEXT,
        channel_msg_id INTEGER
    )
    """)
    conn.commit()
    conn.close()


def save_ticket(data):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("UPDATE tickets SET status='–ó–∞–∫—Ä—ã—Ç—ã–π' WHERE user_id=? AND status='–ê–∫—Ç–∏–≤–Ω—ã–π'", (data["user_id"],))
    cur.execute("""
    INSERT INTO tickets (user, place, desc, photo_id, status, user_id, username, channel_msg_id)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        data["user"],
        data["place"],
        data["desc"],
        data.get("photo"),
        data["status"],
        data["user_id"],
        data["username"],
        None
    ))
    conn.commit()
    ticket_id = cur.lastrowid
    conn.close()
    return ticket_id


def update_channel_msg_id(ticket_id, msg_id):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("UPDATE tickets SET channel_msg_id=? WHERE id=?", (msg_id, ticket_id))
    conn.commit()
    conn.close()


def get_ticket(ticket_id):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("""
        SELECT id, user, place, desc, photo_id, status, user_id, username, channel_msg_id
        FROM tickets WHERE id=?
    """, (ticket_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    return {
        "id": row[0],
        "user": row[1],
        "place": row[2],
        "desc": row[3],
        "photo": row[4],
        "status": row[5],
        "user_id": row[6],
        "username": row[7],
        "channel_msg_id": row[8],
    }


def get_user_tickets(user_id, is_admin=False):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    if is_admin:
        cur.execute("SELECT id, status FROM tickets ORDER BY id DESC")
    else:
        cur.execute("SELECT id, status FROM tickets WHERE user_id=? ORDER BY id DESC LIMIT 5", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows


def set_ticket_status(ticket_id, status):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("UPDATE tickets SET status=? WHERE id=?", (status, ticket_id))
    conn.commit()
    conn.close()


# === –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω ===
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1003187110992

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    context.user_data["step"] = "name"


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ ===
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    text = update.message.text

    if step == "name":
        context.user_data["name"] = text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã —Å–∏–¥–∏—Ç–µ –≤ –æ—Ñ–∏—Å–µ:")
        context.user_data["step"] = "place"

    elif step == "place":
        context.user_data["place"] = text
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:")
        context.user_data["step"] = "problem"

    elif step == "problem":
        context.user_data["problem"] = text
        kb = [[
            InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo"),
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
        ]]
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=InlineKeyboardMarkup(kb))
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# === –§–æ—Ç–æ ===
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") == "waiting_photo" and update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id
        await create_ticket(update, context)
    else:
        await update.message.reply_text("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_photo":
        context.user_data["step"] = "waiting_photo"
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.")

    elif query.data == "skip_photo":
        await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –±–µ–∑ —Ñ–æ—Ç–æ")
        await create_ticket(update, context)

    elif query.data.startswith("close_"):
        tid = int(query.data.split("_")[1])
        t = get_ticket(tid)
        if not t:
            return

        set_ticket_status(tid, "–ó–∞–∫—Ä—ã—Ç—ã–π")

        # –∫—Ç–æ –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç
        admin = update.effective_user
        admin_name = f"@{admin.username}" if admin.username else admin.full_name

        text = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                f"üë§ {t['user']}\n"
                f"üè¢ {t['place']}\n"
                f"üí¨ {t['desc']}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º {admin_name}")

        try:
            if t["photo"]:
                await context.bot.edit_message_caption(
                    chat_id=CHANNEL_ID,
                    message_id=t["channel_msg_id"],
                    caption=text
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=CHANNEL_ID,
                    message_id=t["channel_msg_id"],
                    text=text
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ {tid}: {e}")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                t["user_id"],
                f"‚ùå –í–∞—à —Ç–∏–∫–µ—Ç #{tid} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {t['user_id']}: {e}")

    elif query.data.startswith("ticket_"):
        tid = int(query.data.split("_")[1])
        t = get_ticket(tid)
        if not t:
            return
        text = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                f"üë§ {t['user']}\n"
                f"üè¢ {t['place']}\n"
                f"üí¨ {t['desc']}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {t['status']}")
        kb = []
        if t["status"] == "–ê–∫—Ç–∏–≤–Ω—ã–π":
            kb.append([InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{tid}")])
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb) if kb else None)


# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ ===
async def create_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∏–∫–µ—Ç—ã
    old_tickets = get_user_tickets(user_id, is_admin=True)
    for tid, status in old_tickets:
        t = get_ticket(tid)
        if t and t["status"] == "–ê–∫—Ç–∏–≤–Ω—ã–π" and t["channel_msg_id"]:
            set_ticket_status(tid, "–ó–∞–∫—Ä—ã—Ç—ã–π")
            text_old = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                        f"üë§ {t['user']}\n"
                        f"üè¢ {t['place']}\n"
                        f"üí¨ {t['desc']}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω)")
            try:
                if t["photo"]:
                    await context.bot.edit_message_caption(
                        chat_id=CHANNEL_ID,
                        message_id=t["channel_msg_id"],
                        caption=text_old
                    )
                else:
                    await context.bot.edit_message_text(
                        chat_id=CHANNEL_ID,
                        message_id=t["channel_msg_id"],
                        text=text_old
                    )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–∏–∫–µ—Ç {tid}: {e}")

    ticket_id = save_ticket({
        "user": context.user_data["name"],
        "place": context.user_data["place"],
        "desc": context.user_data["problem"],
        "photo": context.user_data.get("photo_id"),
        "status": "–ê–∫—Ç–∏–≤–Ω—ã–π",
        "user_id": user_id,
        "username": update.effective_user.username
    })

    t = get_ticket(ticket_id)
    text = (f"üÜï –ó–∞—è–≤–∫–∞ #{ticket_id}\n"
            f"üë§ {t['user']}\n"
            f"üè¢ {t['place']}\n"
            f"üí¨ {t['desc']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {t['status']}")

    await update.effective_message.reply_text(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

    button_url = f"https://t.me/{t['username']}" if t["username"] else f"tg://user?id={t['user_id']}"
    kb = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ", url=button_url)],
        [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{t['id']}")]
    ]

    if t["photo"]:
        msg = await context.bot.send_photo(
            CHANNEL_ID,
            t["photo"],
            caption=text,
            reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        msg = await context.bot.send_message(
            CHANNEL_ID,
            text,
            reply_markup=InlineKeyboardMarkup(kb)
        )

    update_channel_msg_id(ticket_id, msg.message_id)
    context.user_data.clear()


# === –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ ===
async def list_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    rows = get_user_tickets(user_id, is_admin=False)
    kb = []
    for tid, status in rows:
        kb.append([InlineKeyboardButton(f"üé´ –¢–∏–∫–µ—Ç #{tid} ({status})", callback_data=f"ticket_{tid}")])
    if not kb:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
        return
    await update.message.reply_text("–í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(kb))


# === FAQ ===
async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files = ["file1.pdf", "file2.pdf"]
    for f in files:
        try:
            with open(f, "rb") as doc:
                await update.message.reply_document(document=doc, caption=f"üìÑ {os.path.basename(f)}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {f}: {e}")


# === –ö–æ–º–∞–Ω–¥—ã ===
async def set_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand("tickets", "–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
        BotCommand("faq", "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (PDF)")
    ])


# === –ó–∞–ø—É—Å–∫ ===
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tickets", list_tickets))
    app.add_handler(CommandHandler("faq", faq))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
