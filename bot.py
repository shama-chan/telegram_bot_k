import logging
import os
import sqlite3
from datetime import datetime

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ----------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è -----------------
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–¥–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

CHANNEL_ID = -1003187110992  # —Å–≤–æ–π channel id

DB_PATH = "bot_final.db"

# ----------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î -----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    cur.execute(
        """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT,
        full_name TEXT,
        place TEXT
    )
    """
    )

    cur.execute(
        """
    CREATE TABLE IF NOT EXISTS tickets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        description TEXT,
        photo_id TEXT,
        status TEXT,
        channel_msg_id INTEGER,
        created_at TEXT,
        assigned_to TEXT
    )
    """
    )

    conn.commit()
    conn.close()


# ----------------- –†–∞–±–æ—Ç–∞ —Å –ë–î -----------------
def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id, username, full_name, place FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    return {"user_id": row[0], "username": row[1], "full_name": row[2], "place": row[3]}


def save_user(user_id, username, full_name, place):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT OR REPLACE INTO users (user_id, username, full_name, place) VALUES (?, ?, ?, ?)",
        (user_id, username, full_name, place),
    )
    conn.commit()
    conn.close()


def save_ticket_to_db(user_id, description, photo_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    created_at = datetime.utcnow().isoformat()
    cur.execute(
        "INSERT INTO tickets (user_id, description, photo_id, status, channel_msg_id, created_at, assigned_to) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user_id, description, photo_id, "–ê–∫—Ç–∏–≤–Ω—ã–π", None, created_at, None),
    )
    ticket_id = cur.lastrowid
    conn.commit()
    conn.close()
    return ticket_id


def update_ticket_channel_msg_id(ticket_id, channel_msg_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE tickets SET channel_msg_id=? WHERE id=?", (channel_msg_id, ticket_id))
    conn.commit()
    conn.close()


def set_ticket_status(ticket_id, status):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE tickets SET status=? WHERE id=?", (status, ticket_id))
    conn.commit()
    conn.close()


def set_ticket_assignee(ticket_id, assignee):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE tickets SET assigned_to=? WHERE id=?", (assignee, ticket_id))
    conn.commit()
    conn.close()


def get_ticket(ticket_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "SELECT id, user_id, description, photo_id, status, channel_msg_id, created_at, assigned_to FROM tickets WHERE id=?",
        (ticket_id,),
    )
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    return {
        "id": row[0],
        "user_id": row[1],
        "description": row[2],
        "photo": row[3],
        "status": row[4],
        "channel_msg_id": row[5],
        "created_at": row[6],
        "assigned_to": row[7],
    }


def get_user_tickets(user_id, limit=5):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "SELECT id, description, status, created_at FROM tickets WHERE user_id=? ORDER BY id DESC LIMIT ?",
        (user_id, limit),
    )
    rows = cur.fetchall()
    conn.close()
    return rows


def close_previous_active_tickets_in_db(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, channel_msg_id, photo_id FROM tickets WHERE user_id=? AND status='–ê–∫—Ç–∏–≤–Ω—ã–π'", (user_id,))
    rows = cur.fetchall()
    for (tid, channel_msg_id, photo_id) in rows:
        cur.execute("UPDATE tickets SET status='–ó–∞–∫—Ä—ã—Ç—ã–π' WHERE id=?", (tid,))
    conn.commit()
    conn.close()
    return rows


# ----------------- UI: Reply Keyboard -----------------
def main_menu_kb():
    kb = [
        [KeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")],
        [KeyboardButton("üìÇ –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã"), KeyboardButton("üìñ FAQ")],
        [KeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)


# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    if user:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è.\n–ù–∞–ø–∏—à–∏ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*:", parse_mode="Markdown")
        context.user_data["step"] = "get_full_name"


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    step = context.user_data.get("step")

    if step == "get_full_name":
        context.user_data["full_name"] = text.strip()
        context.user_data["step"] = "get_place"
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –≥–¥–µ —Ç—ã —Å–∏–¥–∏—à—å (—ç—Ç–∞–∂, –∫–∞–±–∏–Ω–µ—Ç –∏ —Ç.–¥.):")
        return

    if step == "get_place":
        place = text.strip()
        full_name = context.user_data.get("full_name")
        save_user(
            update.effective_user.id,
            update.effective_user.username,
            full_name,
            place,
        )
        context.user_data.clear()
        await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ {full_name}\nüìç {place}", reply_markup=main_menu_kb())
        return

    if text == "üÜï –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç":
        user = get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return
        await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—à—å —Ñ–æ—Ç–æ.")
        context.user_data["step"] = "ticket_description"
        return

    if step == "ticket_description":
        description = text.strip()
        context.user_data["ticket_description"] = description

        kb = [
            [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
            [InlineKeyboardButton("‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="skip_photo")],
        ]
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=InlineKeyboardMarkup(kb))
        context.user_data["step"] = "ticket_ask_photo"
        return

    if text == "üìÇ –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã":
        rows = get_user_tickets(update.effective_user.id, limit=5)
        if not rows:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.", reply_markup=main_menu_kb())
            return
        text_out = "üìÇ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
        for r in rows:
            tid, desc, status, created = r
            text_out += f"#{tid} | {created}\nüìå {status}\nüìù {desc[:120]}{'...' if len(desc) > 120 else ''}\n\n"
        await update.message.reply_text(text_out, reply_markup=main_menu_kb())
        return

    if text == "üìñ FAQ":
        await faq_files(update, context)
        return

    if text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*:", parse_mode="Markdown")
        context.user_data["step"] = "get_full_name"
        return

    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_kb())


async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    if step == "waiting_photo" and update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        context.user_data["ticket_photo_id"] = photo_file_id
        await create_ticket_from_userdata(update, context)
    else:
        await update.message.reply_text("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–ª —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç'.")


# ----------------- Callback –∫–Ω–æ–ø–∫–∏ -----------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "add_photo":
        context.user_data["step"] = "waiting_photo"
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –æ–¥–Ω–æ). –ü–æ—Å–ª–µ —Ñ–æ—Ç–æ —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
        return

    if data == "skip_photo":
        await query.edit_message_text("–°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ...")
        await create_ticket_from_userdata(query, context)
        return

    # –í–∑—è—Ç–∏–µ –∑–∞—è–≤–∫–∏
    if data.startswith("assign_"):
        tid = int(data.split("_", 1)[1])
        t = get_ticket(tid)
        if not t:
            await query.edit_message_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if t.get("assigned_to"):
            await query.answer("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º.", show_alert=True)
            return

        admin = query.from_user
        admin_name = f"@{admin.username}" if admin.username else admin.full_name
        set_ticket_assignee(tid, admin_name)
        set_ticket_status(tid, "–í —Ä–∞–±–æ—Ç–µ")

        u = get_user(t["user_id"])
        user_name_display = u["full_name"] if u else f"User {t['user_id']}"
        user_link = f"https://t.me/{u['username']}" if u and u["username"] else f"tg://user?id={u['user_id']}"

        new_text = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                    f"üë§ {user_name_display}\n"
                    f"üí¨ {t['description']}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n"
                    f"ü§ù –í–∑—è–ª: {admin_name}")

        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–∑—è—Ç–∏–µ", callback_data=f"unassign_{tid}")],
            [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{tid}")]
        ])

        if t["photo"]:
            await context.bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=t["channel_msg_id"], caption=new_text, reply_markup=kb)
        else:
            await context.bot.edit_message_text(chat_id=CHANNEL_ID, message_id=t["channel_msg_id"], text=new_text, reply_markup=kb)

        # –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            if u and u["username"]:
                user_link = f"https://t.me/{u['username']}"
            else:
                user_link = f"tg://user?id={u['user_id']}"

            kb_private = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–æ–ª–ª–µ–≥–æ–π", url=user_link)]
            ])

            await context.bot.send_message(
                admin.id,
                f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É #{tid}\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º:",
                reply_markup=kb_private
    )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –∞–¥–º–∏–Ω—É: {e}")

    # –û—Ç–º–µ–Ω–∞ –≤–∑—è—Ç–∏—è
    if data.startswith("unassign_"):
        tid = int(data.split("_", 1)[1])
        t = get_ticket(tid)
        if not t:
            await query.edit_message_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        admin = query.from_user
        admin_name = f"@{admin.username}" if admin.username else admin.full_name

        if t.get("assigned_to") != admin_name:
            await query.answer("–í—ã –Ω–µ –±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç.", show_alert=True)
            return

        set_ticket_assignee(tid, None)
        set_ticket_status(tid, "–ê–∫—Ç–∏–≤–Ω—ã–π")

        u = get_user(t["user_id"])
        user_name_display = u["full_name"] if u else f"User {t['user_id']}"

        new_text = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                    f"üë§ {user_name_display}\n"
                    f"üí¨ {t['description']}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π")

        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("ü§ù –í–∑—è—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"assign_{tid}")],
            [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{tid}")]
        ])

        if t["photo"]:
            await context.bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=t["channel_msg_id"], caption=new_text, reply_markup=kb)
        else:
            await context.bot.edit_message_text(chat_id=CHANNEL_ID, message_id=t["channel_msg_id"], text=new_text, reply_markup=kb)
        return

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
    if data.startswith("close_"):
        tid = int(data.split("_", 1)[1])
        t = get_ticket(tid)
        if not t:
            await query.edit_message_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        set_ticket_status(tid, "–ó–∞–∫—Ä—ã—Ç—ã–π")
        admin = query.from_user
        admin_name = f"@{admin.username}" if admin.username else admin.full_name

        u = get_user(t["user_id"])
        user_name_display = u["full_name"] if u else f"User {t['user_id']}"

        new_text = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                    f"üë§ {user_name_display}\n"
                    f"üí¨ {t['description']}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º {admin_name}")

        try:
            if t["photo"]:
                await context.bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=t["channel_msg_id"], caption=new_text)
            else:
                await context.bot.edit_message_text(chat_id=CHANNEL_ID, message_id=t["channel_msg_id"], text=new_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: {e}")

        try:
            await context.bot.send_message(t["user_id"], f"‚ùå –í–∞—à —Ç–∏–∫–µ—Ç #{tid} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {t['user_id']}: {e}")

        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return


# ----------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ -----------------
async def create_ticket_from_userdata(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update_or_query, Update):
        message = update_or_query.message
        user_obj = update_or_query.effective_user
    else:
        message = update_or_query.message
        user_obj = update_or_query.from_user

    user = get_user(user_obj.id)
    if not user:
        await message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ù–∞–ø–∏—à–∏ /start.")
        return

    description = context.user_data.get("ticket_description", "")
    photo_id = context.user_data.get("ticket_photo_id")

    prev_rows = close_previous_active_tickets_in_db(user_obj.id)
    for tid, channel_msg_id, prev_photo_id in prev_rows:
        try:
            old_ticket = get_ticket(tid)
            if not old_ticket:
                continue
            u = get_user(old_ticket["user_id"])
            user_name_display = u["full_name"] if u else f"User {old_ticket['user_id']}"
            text_old = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                        f"üë§ {user_name_display}\n"
                        f"üí¨ {old_ticket['description']}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç (—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç)")
            if old_ticket["photo"]:
                await context.bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=old_ticket["channel_msg_id"], caption=text_old)
            else:
                await context.bot.edit_message_text(chat_id=CHANNEL_ID, message_id=old_ticket["channel_msg_id"], text=text_old)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–∏–∫–µ—Ç #{tid} –≤ –∫–∞–Ω–∞–ª–µ: {e}")

    ticket_id = save_ticket_to_db(user_obj.id, description, photo_id)

    text = (f"üÜï –ó–∞—è–≤–∫–∞ #{ticket_id}\n"
            f"üë§ {user['full_name']}\n"
            f"üè¢ {user['place']}\n"
            f"üí¨ {description}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π")

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§ù –í–∑—è—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"assign_{ticket_id}")],
        [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{ticket_id}")]
    ])

    try:
        if photo_id:
            sent = await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo_id, caption=text, reply_markup=kb)
        else:
            sent = await context.bot.send_message(chat_id=CHANNEL_ID, text=text, reply_markup=kb)
        channel_msg_id = sent.message_id
        update_ticket_channel_msg_id(ticket_id, channel_msg_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç –≤ –∫–∞–Ω–∞–ª: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∏–∫–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª. –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ.", reply_markup=main_menu_kb())
        context.user_data.clear()
        return

    try:
        await message.reply_text(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=main_menu_kb())
    except Exception:
        pass

    context.user_data.clear()


# ----------------- FAQ -----------------
async def faq_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files = ["–ö–∞–∫_–ø–æ–º–µ–Ω—è—Ç—å_–ø–∞—Ä–æ–ª—å_–∏–ª–∏_—á—Ç–æ_–¥–µ–ª–∞—Ç—å_–µ—Å–ª–∏_–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞_—É—á–µ—Ç–Ω–∞—è_–∑–∞–ø–∏—Å—å.pdf", "–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï_–ö_–¢–í_–ö–†–£–ì–õ–´–ô_–ó–ê–õ_1_1.pdf", "–°–æ–∑–¥–∞–Ω–∏–µ_–∑–∞—è–≤–∫–∏_—á–µ—Ä–µ–∑_—à–∞–±–ª–æ–Ω_—Ñ–æ—Ä–º—ã.pdf", "–ß—Ç–æ –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –≤ FORTIK.pdf"]

    sent_any = False
    for f in files:
        if os.path.exists(f):
            try:
                with open(f, "rb") as doc:
                    await update.message.reply_document(document=doc, caption=os.path.basename(f))
                    sent_any = True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {f}: {e}")
        else:
            logger.info(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")

    if not sent_any:
        await update.message.reply_text("‚ùå FAQ —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")


async def set_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å / –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
    ])


# ----------------- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -----------------
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
