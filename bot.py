import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import os
import sqlite3

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
def init_db():
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tickets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user TEXT,
        place TEXT,
        desc TEXT,
        photo_id TEXT,
        status TEXT,
        user_id INTEGER,
        username TEXT
    )
    """)
    conn.commit()
    conn.close()

def save_ticket(data):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("""
    INSERT INTO tickets (user, place, desc, photo_id, status, user_id, username)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        data["user"],
        data["place"],
        data["desc"],
        data.get("photo"),
        data["status"],
        data["user_id"],
        data["username"]
    ))
    conn.commit()
    ticket_id = cur.lastrowid
    conn.close()
    return ticket_id

def get_ticket(ticket_id):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    cur.execute("SELECT id, user, place, desc, photo_id, status, user_id, username FROM tickets WHERE id=?", (ticket_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    return {
        "id": row[0],
        "user": row[1],
        "place": row[2],
        "desc": row[3],
        "photo": row[4],
        "status": row[5],
        "user_id": row[6],
        "username": row[7],
    }

def get_user_tickets(user_id, is_admin=False):
    conn = sqlite3.connect("tickets.db")
    cur = conn.cursor()
    if is_admin:
        cur.execute("SELECT id, status FROM tickets ORDER BY id DESC")
    else:
        cur.execute("SELECT id, status FROM tickets WHERE user_id=? ORDER BY id DESC", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows


# === –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω ===
TOKEN = os.getenv("BOT_TOKEN")

# ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1003187110992

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMINS = [5206699138]

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# === –°—Ç–∞—Ä—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    context.user_data["step"] = "name"


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    text = update.message.text

    if step == "name":
        context.user_data["name"] = text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã —Å–∏–¥–∏—Ç–µ –≤ –æ—Ñ–∏—Å–µ:")
        context.user_data["step"] = "place"

    elif step == "place":
        context.user_data["place"] = text
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:")
        context.user_data["step"] = "problem"

    elif step == "problem":
        context.user_data["problem"] = text
        kb = [[
            InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo"),
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
        ]]
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=InlineKeyboardMarkup(kb))

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# === –§–æ—Ç–æ ===
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")

    if step == "waiting_photo" and update.message.photo:
        try:
            photo = update.message.photo[-1]
            context.user_data["photo_id"] = photo.file_id
            await create_ticket(update, context)
        except Exception:
            await update.message.reply_text(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚úÖ")
    else:
        await update.message.reply_text("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_photo":
        context.user_data["step"] = "waiting_photo"
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.")

    elif query.data == "skip_photo":
        await create_ticket(update, context)

    elif query.data.startswith("ticket_"):
        tid = int(query.data.split("_")[1])
        t = get_ticket(tid)
        if not t:
            await query.edit_message_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        text = (f"üé´ –¢–∏–∫–µ—Ç #{tid}\n"
                f"üë§ {t['user']}\n"
                f"üè¢ {t['place']}\n"
                f"üí¨ {t['desc']}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {t['status']}")
        await query.edit_message_text(text)


# === –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ===
async def create_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ticket_id = save_ticket({
        "user": context.user_data["name"],
        "place": context.user_data["place"],
        "desc": context.user_data["problem"],
        "photo": context.user_data.get("photo_id"),
        "status": "–ù–æ–≤–∞—è",
        "user_id": update.effective_user.id,
        "username": update.effective_user.username
    })

    t = get_ticket(ticket_id)
    text = (f"üÜï –ó–∞—è–≤–∫–∞ #{ticket_id}\n"
            f"üë§ {t['user']}\n"
            f"üè¢ {t['place']}\n"
            f"üí¨ {t['desc']}")

    # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ"
    if t["username"]:
        button_url = f"https://t.me/{t['username']}"
    else:
        button_url = f"tg://user?id={t['user_id']}"

    kb = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ", url=button_url)]]

    if t["photo"]:
        await context.bot.send_photo(
            CHANNEL_ID,
            t["photo"],
            caption=text,
            reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        await context.bot.send_message(
            CHANNEL_ID,
            text,
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–∏ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        if t["photo"]:
            msg = await context.bot.send_photo(admin_id, t["photo"], caption=text)
        else:
            msg = await context.bot.send_message(admin_id, text)

        context.chat_data[f"ticket_{msg.message_id}"] = ticket_id

    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    context.user_data.clear()


# === –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return

    if not update.message.reply_to_message:
        return

    ticket_id = context.chat_data.get(f"ticket_{update.message.reply_to_message.message_id}")
    if not ticket_id:
        return

    t = get_ticket(ticket_id)
    if not t:
        return

    user_id = t["user_id"]
    text = f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{update.message.text}"

    await context.bot.send_message(user_id, text)
    await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


# === –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ ===
async def list_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_admin = user_id in ADMINS
    rows = get_user_tickets(user_id, is_admin)

    kb = []
    for tid, status in rows:
        kb.append([InlineKeyboardButton(f"üé´ –¢–∏–∫–µ—Ç #{tid} ({status})", callback_data=f"ticket_{tid}")])

    if not kb:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    await update.message.reply_text("–í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(kb))


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ===
async def set_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand("tickets", "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
    ])


# === –ó–∞–ø—É—Å–∫ ===
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tickets", list_tickets))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, admin_reply))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
