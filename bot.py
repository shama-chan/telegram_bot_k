import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1002936995160

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –≤ –ø–∞–º—è—Ç–∏ (–ø–æ–∫–∞ –±–µ–∑ –±–∞–∑—ã)
tickets = {}

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# === –°—Ç–∞—Ä—Ç (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    context.user_data["step"] = "name"


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    text = update.message.text

    if step == "name":
        context.user_data["name"] = text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã —Å–∏–¥–∏—Ç–µ –≤ –æ—Ñ–∏—Å–µ:")
        context.user_data["step"] = "place"

    elif step == "place":
        context.user_data["place"] = text
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:")
        context.user_data["step"] = "problem"

    elif step == "problem":
        context.user_data["problem"] = text
        kb = [[
            InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo"),
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
        ]]
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=InlineKeyboardMarkup(kb))

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")



# === –§–æ—Ç–æ ===
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")

    if step == "waiting_photo" and update.message.photo:
        try:
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–Ω–æ file_id (–∞ –Ω–µ file_path)
            context.user_data["photo_id"] = photo.file_id

            # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
            await create_ticket(update, context)

        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
    else:
        await update.message.reply_text("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_photo":
        context.user_data["step"] = "waiting_photo"
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.")

    elif query.data == "skip_photo":
        await create_ticket(update, context)




# === –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ===
async def create_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ticket_id = len(tickets) + 1
    tickets[ticket_id] = {
        "user": context.user_data["name"],
        "place": context.user_data["place"],
        "desc": context.user_data["problem"],
        "photo": context.user_data.get("photo_id"),
        "status": "–ù–æ–≤–∞—è",
        "user_id": update.effective_user.id,
    }

    text = (f"üÜï –ó–∞—è–≤–∫–∞ #{ticket_id}\n"
            f"üë§ {tickets[ticket_id]['user']}\n"
            f"üè¢ {tickets[ticket_id]['place']}\n"
            f"üí¨ {tickets[ticket_id]['desc']}")

    # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ" = –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
    kb = [[
        InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ", url=f"tg://user?id={tickets[ticket_id]['user_id']}")
    ]]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    if tickets[ticket_id]["photo"]:
        await context.bot.send_photo(
            CHANNEL_ID,
            tickets[ticket_id]["photo"],
            caption=text,
            reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        await context.bot.send_message(
            CHANNEL_ID,
            text,
            reply_markup=InlineKeyboardMarkup(kb)
        )

    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª ‚úÖ")
    context.user_data.clear()

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
